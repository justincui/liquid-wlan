# Copyright (c) 2011 Joseph Gaeddert
# Copyright (c) 2011 Virginia Polytechnic Institute & State University
#
# This file is part of liquid.
#
# liquid is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# liquid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with liquid.  If not, see <http://www.gnu.org/licenses/>.

# 
# Makefile for liquid WLAN libraries
#
# Targets:
#    all                 :   dynamic shared-library object (e.g. libliquid-wlan.so)
#    install             :   install the dynamic shared library object and
#                            header file(s)
#    uninstall           :   uninstall the library and header file(s)
#    clean               :   clean all targets (bench, check, examples, etc)
#    distclean           :   removes everything except the originally distributed files
#    check               :   build and run all autotests
#    examples            :   build all examples
#
#    clean-examples      :   clean examples programs
#

# paths
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
VPATH = @srcdir@
include_dirs	:= . include ../liquid-dsp/include
vpath %.h $(include_dirs)
modulesdir = src

# programs
CC = @CC@
MV	:= mv -f
RM	:= rm -f
SED	:= @SED@
GREP	:= @GREP@
AR	:= ar
RANLIB	:= ranlib

# flags
INCLUDE_CFLAGS	= $(addprefix -I ,$(include_dirs))
CONFIG_CFLAGS	= @ARCH_OPTION@
# -g : debugging info
CFLAGS		+= $(INCLUDE_CFLAGS) -g -O2 -Wall -fPIC $(CONFIG_CFLAGS)
LDFLAGS		+= @LIBS@
ARFLAGS		= r
PATHSEP		= /

# 
# liquid headers
#
headers_install	:= liquid-wlan.h
headers		:= $(headers_install) liquid-wlan.internal.h
include_headers	:= $(addprefix include/,$(headers))


## 
## main library objects
##

all:

# Target collection
#
# Information about targets for each module is collected
# in these variables
objects :=							\
	src/wlan_data_scrambler.o				\
	src/wlan_fec.o						\
	src/wlan_interleaver.o					\
	src/wlan_lfsr.o						\
	src/wlan_modem.o					\
	src/wlan_packet.o					\
	src/wlan_signal.o					\
	src/wlanframe.common.o					\
	src/wlanframegen.o					\
	src/wlanframesync.o					\
	src/utility.o						\
	src/gentab/wlan_intlv_R6.o				\
	src/gentab/wlan_intlv_R9.o				\
	src/gentab/wlan_intlv_R12.o				\
	src/gentab/wlan_intlv_R18.o				\
	src/gentab/wlan_intlv_R24.o				\
	src/gentab/wlan_intlv_R36.o				\
	src/gentab/wlan_intlv_R48.o				\
	src/gentab/wlan_intlv_R54.o				\
	src/libfec/viterbi27.o					\
	src/libfec/viterbi27_port.o				\

# NOTE: for some reason this file causes linking errors ('corrupt archive')
# src/libliquid_wlan.o

# structured interleaver auto-generated tables
src/gentab/wlan_interleaver_gentab : % : %.c

src/gentab/wlan_intlv_R6.c  : src/gentab/wlan_interleaver_gentab ; ./$< -r 6  > $@
src/gentab/wlan_intlv_R9.c  : src/gentab/wlan_interleaver_gentab ; ./$< -r 9  > $@
src/gentab/wlan_intlv_R12.c : src/gentab/wlan_interleaver_gentab ; ./$< -r 12 > $@
src/gentab/wlan_intlv_R18.c : src/gentab/wlan_interleaver_gentab ; ./$< -r 18 > $@
src/gentab/wlan_intlv_R24.c : src/gentab/wlan_interleaver_gentab ; ./$< -r 24 > $@
src/gentab/wlan_intlv_R36.c : src/gentab/wlan_interleaver_gentab ; ./$< -r 36 > $@
src/gentab/wlan_intlv_R48.c : src/gentab/wlan_interleaver_gentab ; ./$< -r 48 > $@
src/gentab/wlan_intlv_R54.c : src/gentab/wlan_interleaver_gentab ; ./$< -r 54 > $@

# explicitly define dependencies for library objects
$(objects) : %.o : %.c $(include_headers)

##
## TARGET : all       - build shared library (default)
##
.PHONY: all

# Shared library
SHARED_LIB	= @SH_LIB@

# liquid library definition
libliquid-wlan.a: $(objects)
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

# darwin
#
# gcc -dynamiclib -install_name libliquid-wlan.dylib -o libliquid-wlan.dylib libmodem.a libutility.a 
libliquid-wlan.dylib: $(objects)
	$(CC) $(LDFLAGS) -dynamiclib -install_name $@ -o $@ $^

# linux, et al
libliquid-wlan.so: libliquid-wlan.a
	$(CC) $(LDFLAGS) -shared -Xlinker -soname=$@ -o $@ -Wl,-whole-archive $^ -Wl,-no-whole-archive

all: libliquid-wlan.a $(SHARED_LIB)

##
## TARGET : help      - print list of targets (see documentation for more)
##

# look for all occurences of '## TARGET : ' and print rest of line to screen
help:
	@echo "Targets for liquid-wlan makefile:"
	@$(GREP) -E "^## TARGET : " [Mm]akefile | $(SED) 's/## TARGET : /  /'

## 
## TARGET : install   - installs the libraries and header files in the host system
##

install:
	@echo "installing..."
	mkdir -p $(exec_prefix)/lib
	install -m 644 -p $(SHARED_LIB) libliquid-wlan.a $(exec_prefix)/lib
	mkdir -p $(prefix)/include
	mkdir -p $(prefix)/include/liquid
	install -m 644 -p $(addprefix include/,$(headers_install)) $(prefix)/include/liquid
	@echo ""
	@echo "---------------------------------------------------------"
	@echo "  liquid-wlan was successfully installed.     "
	@echo ""
	@echo "  On some machines (e.g. Linux) you should rebind your"
	@echo "  libraries by running 'ldconfig' to make the shared"
	@echo "  object available.  You might also need to modify your"
	@echo "  LD_LIBRARY_PATH environment variable to include the"
	@echo "  directory $(exec_prefix)"
	@echo "---------------------------------------------------------"
	@echo ""

## 
## TARGET : uninstall - uninstalls the libraries and header files in the host system
##

uninstall:
	@echo "uninstalling..."
	$(RM) $(addprefix $(prefix)/include/liquid/, $(headers_install))
	$(RM) $(exec_prefix)/lib/libliquid-wlan.a
	$(RM) $(exec_prefix)/lib/$(SHARED_LIB)
	@echo "done."

##
## autoscript
##

autoscript : scripts/autoscript

scripts/autoscript.o scripts/main.o : %.o : %.c
	$(CC) $(CFLAGS) -c -o $@ $<

scripts/autoscript : scripts/autoscript.o scripts/main.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^

clean-autoscript :
	$(RM) scripts/autoscript.o scripts/main.o scripts/autoscript


##
## TARGET : check     - build and run autotest scripts
##

annexg_data_src :=		\
	annex-g-data/G1.c	\
	annex-g-data/G2.c	\
	annex-g-data/G3.c	\
	annex-g-data/G4.c	\
	annex-g-data/G5.c	\
	annex-g-data/G6.c	\
	annex-g-data/G7.c	\
	annex-g-data/G8.c	\
	annex-g-data/G9.c	\
	annex-g-data/G11.c	\
	annex-g-data/G12.c	\
	annex-g-data/G13.c	\
	annex-g-data/G14.c	\
	annex-g-data/G16.c	\
	annex-g-data/G17.c	\
	annex-g-data/G18.c	\
	annex-g-data/G21.c	\
	annex-g-data/G22.c	\
	annex-g-data/G24.c	\

autotest_programs :=						\
	autotest/annexg_datascramble_autotest			\
	autotest/annexg_framegen_autotest			\
	autotest/datascrambler_autotest				\
	autotest/interleaver_data_autotest			\
	autotest/signalfield_pack_autotest			\
	autotest/signalfield_encoder_autotest			\
	autotest/signalfield_interleaver_autotest		\
	autotest/signalfield_symbolgen_autotest			\
	autotest/wlanframesync_autotest				\
	autotest/wlan_modem_autotest				\

autotest_objects	= $(patsubst %,%.o,$(autotest_programs))

AUTOTEST_LDFLAGS = $(LDFLAGS)

# NOTE: linked libraries must come _after_ the target program
$(autotest_objects): %.o : %.c $(autotest_data_src)

$(autotest_programs): % : %.o libliquid-wlan.a
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

# make check programs
check-programs : $(autotest_programs)

# main target; run all programs
check : $(autotest_programs)
	$(patsubst %, ./% &&, $(autotest_programs)) echo "\n====================\n   autotest pass!\n====================\n"

# clean autotest
clean-check:
	$(RM) autotest/*.o
	$(RM) $(autotest_programs)



##
## TARGET : bench     - build and run all benchmarks
##

benchmark_programs :=						\
	benchmark/wlanframegen_benchmark			\
	benchmark/wlanframesync_benchmark			\

benchmark_objects	= $(patsubst %,%.o,$(benchmark_programs))

BENCHMARK_LDFLAGS = $(LDFLAGS)

# NOTE: linked libraries must come _after_ the target program
$(benchmark_objects): %.o : %.c $(benchmark_data_src)

$(benchmark_programs): % : %.o libliquid-wlan.a
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

# main target; run all programs
bench : $(benchmark_programs)
	$(patsubst %, ./% &&, $(benchmark_programs)) echo "\n====================\n   benchmark done\n====================\n"

# clean benchmark
clean-bench:
	$(RM) benchmark/*.o
	$(RM) $(benchmark_programs)


## 
## TARGET : examples  - build all examples binaries
##
.PHONY: examples
example_programs :=						\
	examples/wlanframegen_example				\
	examples/wlanframesync_example				\

example_objects	= $(patsubst %,%.o,$(example_programs))
examples: $(example_programs)

EXAMPLES_LDFLAGS = $(LDFLAGS)

# NOTE: linked libraries must come _after_ the target program
$(example_objects): %.o : %.c

$(example_programs): % : %.o libliquid-wlan.a
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

# clean examples
clean-examples:
	$(RM) examples/*.o
	$(RM) $(example_programs)

## 
## TARGET : sandbox   - build all sandbox binaries
##

.PHONY: sandbox
sandbox_programs =						\
	sandbox/annexg_fec_test					\
	sandbox/datascrambler_test				\
	sandbox/interleaver_table_test				\
	sandbox/interleaver_test				\
	sandbox/packet_codec_test				\
	sandbox/signalfield_fec_test				\
	sandbox/signalfield_symbolgen_test			\

sandbox_objects	= $(patsubst %,%.o,$(sandbox_programs))
sandbox: $(sandbox_programs)
SANDBOX_LDFLAGS = $(LDFLAGS) -lfftw3f

# NOTE: linked libraries must come _after_ the target program
$(sandbox_objects): %.o : %.c

$(sandbox_programs): % : %.o libliquid-wlan.a
	$(CC) $(SANDBOX_LDFLAGS) $^ -o $@

# clean sandbox
clean-sandbox:
	$(RM) sandbox/*.o
	$(RM) $(sandbox_programs)



##
## TARGET : clean     - clean build (objects, dependencies, libraries, etc.)
##


clean: clean-check clean-examples clean-sandbox
	$(RM) $(objects)
	$(RM) src/gentab/wlan_interleaver_gentab
	$(RM) src/gentab/wlan_intlv_R*.c
	$(RM) libliquid-wlan.a
	$(RM) $(SHARED_LIB)

##
## TARGET : distclean - removes everything except the originally distributed files
##

distclean: clean
	@echo "cleaning distribution..."
	$(RM) octave-core *.m
	$(RM) configure config.h config.h.in config.h.in~ config.log config.status
	$(RM) -r autom4te.cache
	$(RM) makefile

